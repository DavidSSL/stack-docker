---
version: '3.6'
services:
  # The environment variable "TAG" is used throughout this file to
  # specify the version of the images to run. The default is set in the
  # '.env' file in this folder. It can be overridden with any normal
  # technique for setting environment variables, for example:
  #
  #   TAG=6.0.0-beta1 docker-compose up
  #
  # REF: https://docs.docker.com/compose/compose-file/#variable-substitution
  #
  # Also be sure to set the ELASTIC_VERSION variable. For released versions,
  # ${TAG} and ${ELASTIC_VERSION} will be identical, but for pre-release
  # versions, ${TAG} might contain an extra build identifier, like
  # "6.0.0-beta1-3eab5b40", so a full invocation might look like:
  #
  #   ELASTIC_VERSION=6.0.0-beta1 TAG=6.0.0-beta1-3eab5b40 docker-compose up
  #
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:${TAG}
    container_name: elasticsearch
    secrets:
      - source: elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    ports: ['127.0.0.1:9200:9200']
    networks: ['stack']
    # Make exception for `elastic` pw in ENV file cause it's built into the entry point.
    # something to take a look at in the future.
    env_file: .env
    volumes: ['es_data:/usr/share/elasticsearch/data']

  kibana:
    image: docker.elastic.co/kibana/kibana:${TAG}
    container_name: kibana
    secrets:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
    ports: ['127.0.0.1:5601:5601']
    volumes: ['./scripts/setup-kibana.sh:/usr/local/bin/setup-kibana.sh:ro']
    networks: ['stack']
    depends_on: ['elasticsearch']

  logstash:
    image: docker.elastic.co/logstash/logstash:${TAG}
    container_name: logstash
    secrets:
      - source: logstash.conf
        target: /usr/share/logstash/pipeline/logstash.conf
      - source: logstash.yml
        target: /usr/share/logstash/logstash.yml
    volumes: ['./scripts/setup-logstash.sh:/usr/local/bin/setup-logstash.sh:ro']
    networks: ['stack']
    depends_on: ['elasticsearch']

  auditbeat:
    image: docker.elastic.co/beats/auditbeat:${TAG}
    container_name: auditbeat
    command: -e  # -e flag to log to stderr and disable syslog/file output
    cap_add: ['AUDIT_CONTROL', 'AUDIT_READ']
    secrets:
      - source: auditbeat.yml
        target: /usr/share/auditbeat/auditbeat.yml
    # Auditbeat must run in the main process namespace.
    pid: host
    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']

  filebeat:
    image: docker.elastic.co/beats/filebeat:${TAG}
    container_name: filebeat
    command: -e  # -e flag to log to stderr and disable syslog/file output
    # If the host system has logs at "/var/log", mount them at "/mnt/log"
    # inside the container, where Filebeat can find them.
    # volumes: ['/var/log:/mnt/log:ro']
    secrets:
      - source: filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']

  heartbeat:
    image: docker.elastic.co/beats/heartbeat:${TAG}
    container_name: heartbeat
    command: -e  # -e flag to log to stderr and disable syslog/file output
    secrets:
      - source: heartbeat.yml
        target: /usr/share/heartbeat/heartbeat.yml
    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${TAG}
    container_name: metricbeat
    # The commented sections below enable Metricbeat to monitor the Docker host,
    # rather than the Metricbeat container. It's problematic with Docker for
    # Windows, however, since "/proc", "/sys" etc. don't exist on Windows.
    # The same likely applies to OSX (needs testing).
    # volumes:
    #   - /proc:/hostfs/proc:ro
    #   - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
    #   - /:/hostfs:ro
    command: -e  # -e flag to log to stderr and disable syslog/file output
    secrets:
      - source: metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']

  packetbeat:
    image: docker.elastic.co/beats/packetbeat:${TAG}
    container_name: packetbeat
    # Packetbeat needs some elevated privileges to capture network traffic.
    # We'll grant them with POSIX capabilities.
    cap_add: ['NET_RAW', 'NET_ADMIN']
    # Use "host mode" networking to allow Packetbeat to capture traffic from
    # the real network interface on the host, rather than being isolated to the
    # container's virtual interface.
    network_mode: host
    # Since we did that, Packetbeat is not part of the "stack" Docker network
    # that the other containers are connected to, and thus can't resolve the
    # hostname "elasticsearch". Instead, we'll tell it to find Elasticsearch
    # on "localhost", which is the Docker host machine in this context.
    command: -e  # -e flag to log to stderr and disable syslog/file output
    secrets:
      - source: packetbeat.yml
        target: /usr/share/packetbeat/packetbeat.yml
    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
    depends_on: ['elasticsearch', 'kibana']

  apm-server:
    image: docker.elastic.co/apm/apm-server:${TAG}
    container_name: apm_server
    ports: ['127.0.0.1:8200:8200']
    networks: ['stack']
    command: -e  # -e flag to log to stderr and disable syslog/file output
    secrets:
      - source: apm-server.yml
        target: /usr/share/apm-server/apm-server.yml
    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
    depends_on: ['elasticsearch', 'kibana']

#
#  setup_packetbeat:
#    image: docker.elastic.co/beats/packetbeat:${TAG}
#    container_name: setup_packetbeat
#    cap_add: ['NET_RAW', 'NET_ADMIN']
#    volumes: ['./scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
#    command: ['/bin/bash', '-c', 'cat /usr/local/bin/setup-beat.sh | tr -d "\r" | bash -s packetbeat']
#    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
#    depends_on: ['kibana']

networks: {stack: {}}
volumes:
  es_data:

secrets:
  logstash.yml:
    file: ./config/logstash/logstash.yml
  logstash.conf:
    file: ./config/logstash/pipeline/logstash.conf
  elasticsearch.yml:
    file: ./config/elasticsearch/elasticsearch.yml
  kibana.yml:
    file: ./config/kibana/kibana.yml
  auditbeat.yml:
    file: ./config/auditbeat/auditbeat.yml
  filebeat.yml:
    file: ./config/filebeat/filebeat.yml
  heartbeat.yml:
    file: ./config/heartbeat/heartbeat.yml
  metricbeat.yml:
    file: ./config/metricbeat/metricbeat.yml
  packetbeat.yml:
    file: ./config/packetbeat/packetbeat.yml
  apm-server.yml:
    file: ./config/apm-server/apm-server.yml
